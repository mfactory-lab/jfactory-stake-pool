{"version":3,"file":"index.browser.esm.js","sources":["../src/utils/math.ts","../src/constants.ts","../src/utils/program-address.ts","../src/layouts.ts","../src/utils/stake.ts","../src/utils/token.ts","../src/utils/instruction.ts","../src/utils/index.ts","../src/instructions.ts","../src/index.ts"],"sourcesContent":["import BN from 'bn.js';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nexport function solToLamports(amount: number): number {\n  if (isNaN(amount)) return Number(0);\n  return Number(amount * LAMPORTS_PER_SOL);\n}\n\nexport function lamportsToSol(lamports: number | BN): number {\n  if (typeof lamports === 'number') {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, '0');\n  const splitIndex = lamportsString.length - 9;\n  const solString = lamportsString.slice(0, splitIndex) + '.' + lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n","import { Buffer } from 'buffer';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\n\n// Public key that identifies the SPL Stake Pool program.\nexport const STAKE_POOL_PROGRAM_ID = new PublicKey('SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy');\n\n// Maximum number of validators to update during UpdateValidatorListBalance.\nexport const MAX_VALIDATORS_TO_UPDATE = 5;\n\n// Seed used to derive transient stake accounts.\nexport const TRANSIENT_STAKE_SEED_PREFIX = Buffer.from('transient');\n\n// Minimum amount of staked SOL required in a validator stake account to allow\n// for merges without a mismatch on credits observed\nexport const MINIMUM_ACTIVE_STAKE = LAMPORTS_PER_SOL;\n\n/// Minimum amount of SOL in the reserve\nexport const MINIMUM_RESERVE_LAMPORTS = LAMPORTS_PER_SOL;\n","import { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport { TRANSIENT_STAKE_SEED_PREFIX } from '../constants';\n\n/**\n * Generates the withdraw authority program address for the stake pool\n */\nexport async function findWithdrawAuthorityProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [stakePoolAddress.toBuffer(), Buffer.from('withdraw')],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [voteAccountAddress.toBuffer(), stakePoolAddress.toBuffer()],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findTransientStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      TRANSIENT_STAKE_SEED_PREFIX,\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      new Uint8Array(seed.toArray('le', 8)),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n","import { publicKey, struct, u32, u64, u8, option, vec } from '@project-serum/borsh';\nimport { Lockup, PublicKey } from '@solana/web3.js';\nimport { AccountInfo } from '@solana/spl-token';\nimport BN from 'bn.js';\n\nexport interface Fee {\n  denominator: BN;\n  numerator: BN;\n}\n\nconst feeFields = [u64('denominator'), u64('numerator')];\n\n/**\n * AccountLayout.encode from \"@solana/spl-token\" doesn't work\n */\nexport const AccountLayout = struct<AccountInfo>([\n  publicKey('mint'),\n  publicKey('owner'),\n  u64('amount'),\n  u32('delegateOption'),\n  publicKey('delegate'),\n  u8('state'),\n  u32('isNativeOption'),\n  u64('isNative'),\n  u64('delegatedAmount'),\n  u32('closeAuthorityOption'),\n  publicKey('closeAuthority'),\n]);\n\nexport enum AccountType {\n  Uninitialized,\n  StakePool,\n  ValidatorList,\n}\n\nexport interface StakePool {\n  accountType: AccountType;\n  manager: PublicKey;\n  staker: PublicKey;\n  stakeDepositAuthority: PublicKey;\n  stakeWithdrawBumpSeed: number;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  poolMint: PublicKey;\n  managerFeeAccount: PublicKey;\n  tokenProgramId: PublicKey;\n  totalLamports: BN;\n  poolTokenSupply: BN;\n  lastUpdateEpoch: BN;\n  lockup: Lockup;\n  epochFee: Fee;\n  nextEpochFee?: Fee | undefined;\n  preferredDepositValidatorVoteAddress?: PublicKey | undefined;\n  preferredWithdrawValidatorVoteAddress?: PublicKey | undefined;\n  stakeDepositFee: Fee;\n  stakeWithdrawalFee: Fee;\n  nextStakeWithdrawalFee?: Fee | undefined;\n  stakeReferralFee: number;\n  solDepositAuthority?: PublicKey | undefined;\n  solDepositFee: Fee;\n  solReferralFee: number;\n  solWithdrawAuthority?: PublicKey | undefined;\n  solWithdrawalFee: Fee;\n  nextSolWithdrawalFee?: Fee | undefined;\n  lastEpochPoolTokenSupply: BN;\n  lastEpochTotalLamports: BN;\n}\n\nexport const StakePoolLayout = struct<StakePool>([\n  u8('accountType'),\n  publicKey('manager'),\n  publicKey('staker'),\n  publicKey('stakeDepositAuthority'),\n  u8('stakeWithdrawBumpSeed'),\n  publicKey('validatorList'),\n  publicKey('reserveStake'),\n  publicKey('poolMint'),\n  publicKey('managerFeeAccount'),\n  publicKey('tokenProgramId'),\n  u64('totalLamports'),\n  u64('poolTokenSupply'),\n  u64('lastUpdateEpoch'),\n  struct([u64('unixTimestamp'), u64('epoch'), publicKey('custodian')], 'lockup'),\n  struct(feeFields, 'epochFee'),\n  option(struct(feeFields), 'nextEpochFee'),\n  option(publicKey(), 'preferredDepositValidatorVoteAddress'),\n  option(publicKey(), 'preferredWithdrawValidatorVoteAddress'),\n  struct(feeFields, 'stakeDepositFee'),\n  struct(feeFields, 'stakeWithdrawalFee'),\n  option(struct(feeFields), 'nextStakeWithdrawalFee'),\n  u8('stakeReferralFee'),\n  option(publicKey(), 'solDepositAuthority'),\n  struct(feeFields, 'solDepositFee'),\n  u8('solReferralFee'),\n  option(publicKey(), 'solWithdrawAuthority'),\n  struct(feeFields, 'solWithdrawalFee'),\n  option(struct(feeFields), 'nextSolWithdrawalFee'),\n  u64('lastEpochPoolTokenSupply'),\n  u64('lastEpochTotalLamports'),\n]);\n\nexport enum ValidatorStakeInfoStatus {\n  Active,\n  DeactivatingTransient,\n  ReadyForRemoval,\n}\n\nexport interface ValidatorStakeInfo {\n  status: ValidatorStakeInfoStatus;\n  voteAccountAddress: PublicKey;\n  activeStakeLamports: BN;\n  transientStakeLamports: BN;\n  transientSeedSuffixStart: BN;\n  transientSeedSuffixEnd: BN;\n  lastUpdateEpoch: BN;\n}\n\nexport const ValidatorStakeInfoLayout = struct<ValidatorStakeInfo>([\n  /// Amount of active stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('activeStakeLamports'),\n  /// Amount of transient stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('transientStakeLamports'),\n  /// Last epoch the active and transient stake lamports fields were updated\n  u64('lastUpdateEpoch'),\n  /// Start of the validator transient account seed suffixes\n  u64('transientSeedSuffixStart'),\n  /// End of the validator transient account seed suffixes\n  u64('transientSeedSuffixEnd'),\n  /// Status of the validator stake account\n  u8('status'),\n  /// Validator vote account address\n  publicKey('voteAccountAddress'),\n]);\n\nexport interface ValidatorList {\n  /// Account type, must be ValidatorList currently\n  accountType: number;\n  /// Maximum allowable number of validators\n  maxValidators: number;\n  /// List of stake info for each validator in the pool\n  validators: ValidatorStakeInfo[];\n}\n\nexport const ValidatorListLayout = struct<ValidatorList>([\n  u8('accountType'),\n  u32('maxValidators'),\n  vec(ValidatorStakeInfoLayout, 'validators'),\n]);\n","import {\n  Connection,\n  Keypair,\n  PublicKey,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { findStakeProgramAddress, findTransientStakeProgramAddress } from './program-address';\nimport BN from 'bn.js';\n\nimport { lamportsToSol } from './math';\nimport { WithdrawAccount } from '../index';\nimport {\n  Fee,\n  StakePool,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfoStatus,\n} from '../layouts';\nimport {\n  MINIMUM_ACTIVE_STAKE,\n  MINIMUM_RESERVE_LAMPORTS,\n  STAKE_POOL_PROGRAM_ID,\n} from '../constants';\n\nexport async function getValidatorListAccount(connection: Connection, pubkey: PublicKey) {\n  const account = await connection.getAccountInfo(pubkey);\n  if (!account) {\n    throw new Error('Invalid validator list account');\n  }\n  return {\n    pubkey,\n    account: {\n      data: ValidatorListLayout.decode(account?.data) as ValidatorList,\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\nexport interface ValidatorAccount {\n  type: 'preferred' | 'active' | 'transient' | 'reserve';\n  voteAddress?: PublicKey | undefined;\n  stakeAddress: PublicKey;\n  lamports: number;\n}\n\nexport async function prepareWithdrawAccounts(\n  connection: Connection,\n  stakePool: StakePool,\n  stakePoolAddress: PublicKey,\n  amount: number,\n  compareFn?: (a: ValidatorAccount, b: ValidatorAccount) => number,\n  skipFee?: boolean,\n): Promise<WithdrawAccount[]> {\n  const validatorListAcc = await connection.getAccountInfo(stakePool.validatorList);\n  const validatorList = ValidatorListLayout.decode(validatorListAcc?.data) as ValidatorList;\n\n  if (!validatorList?.validators || validatorList?.validators.length == 0) {\n    throw new Error('No accounts found');\n  }\n\n  const minBalanceForRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n  const minBalance = minBalanceForRentExemption + MINIMUM_ACTIVE_STAKE;\n\n  type AccountType = 'preferred' | 'active' | 'transient' | 'reserve';\n\n  let accounts = [] as Array<{\n    type: AccountType;\n    voteAddress?: PublicKey | undefined;\n    stakeAddress: PublicKey;\n    lamports: number;\n  }>;\n\n  // Prepare accounts\n  for (const validator of validatorList.validators) {\n    if (validator.status !== ValidatorStakeInfoStatus.Active) {\n      continue;\n    }\n\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      validator.voteAccountAddress,\n      stakePoolAddress,\n    );\n\n    const isPreferred = stakePool?.preferredWithdrawValidatorVoteAddress?.equals(\n      validator.voteAccountAddress,\n    );\n\n    if (!validator.activeStakeLamports.isZero()) {\n      accounts.push({\n        type: isPreferred ? 'preferred' : 'active',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: stakeAccountAddress,\n        lamports: validator.activeStakeLamports.toNumber(),\n      });\n      continue;\n    }\n\n    const transientStakeLamports = validator.transientStakeLamports.toNumber() - minBalance;\n    if (transientStakeLamports > 0) {\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      accounts.push({\n        type: isPreferred ? 'preferred' : 'transient',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: transientStakeAccountAddress,\n        lamports: transientStakeLamports,\n      });\n    }\n  }\n\n  // Sort from highest to lowest balance\n  accounts = accounts.sort(compareFn ? compareFn : (a, b) => b.lamports - a.lamports);\n\n  const reserveStake = await connection.getAccountInfo(stakePool.reserveStake);\n  const reserveStakeBalance =\n    (reserveStake?.lamports ?? 0) - minBalanceForRentExemption - MINIMUM_RESERVE_LAMPORTS;\n\n  if (reserveStakeBalance > 0) {\n    accounts.push({\n      type: 'reserve',\n      stakeAddress: stakePool.reserveStake,\n      lamports: reserveStakeBalance,\n    });\n  }\n\n  // Prepare the list of accounts to withdraw from\n  const withdrawFrom: WithdrawAccount[] = [];\n  let remainingAmount = amount;\n\n  const fee = stakePool.stakeWithdrawalFee;\n  const inverseFee: Fee = {\n    numerator: fee.denominator.sub(fee.numerator),\n    denominator: fee.denominator,\n  };\n\n  for (const type of <AccountType[]>['preferred', 'active', 'transient', 'reserve']) {\n    const filteredAccounts = accounts.filter((a) => a.type == type);\n\n    for (const { stakeAddress, voteAddress, lamports } of filteredAccounts) {\n      if (lamports <= minBalance && type == 'transient') {\n        continue;\n      }\n\n      let availableForWithdrawal = calcPoolTokensForDeposit(stakePool, lamports);\n\n      if (!skipFee && !inverseFee.numerator.isZero()) {\n        availableForWithdrawal = divideBnToNumber(\n          new BN(availableForWithdrawal).mul(inverseFee.denominator),\n          inverseFee.numerator,\n        );\n      }\n\n      const poolAmount = Math.min(availableForWithdrawal, remainingAmount);\n      if (poolAmount <= 0) {\n        continue;\n      }\n\n      // Those accounts will be withdrawn completely with `claim` instruction\n      withdrawFrom.push({ stakeAddress, voteAddress, poolAmount });\n      remainingAmount -= poolAmount;\n\n      if (remainingAmount == 0) {\n        break;\n      }\n    }\n\n    if (remainingAmount == 0) {\n      break;\n    }\n  }\n\n  // Not enough stake to withdraw the specified amount\n  if (remainingAmount > 0) {\n    throw new Error(\n      `No stake accounts found in this pool with enough balance to withdraw ${lamportsToSol(\n        amount,\n      )} pool tokens.`,\n    );\n  }\n\n  return withdrawFrom;\n}\n\n/**\n * Calculate the pool tokens that should be minted for a deposit of `stakeLamports`\n */\nexport function calcPoolTokensForDeposit(stakePool: StakePool, stakeLamports: number): number {\n  if (stakePool.poolTokenSupply.isZero() || stakePool.totalLamports.isZero()) {\n    return stakeLamports;\n  }\n  return Math.floor(\n    divideBnToNumber(new BN(stakeLamports).mul(stakePool.poolTokenSupply), stakePool.totalLamports),\n  );\n}\n\n/**\n * Calculate lamports amount on withdrawal\n */\nexport function calcLamportsWithdrawAmount(stakePool: StakePool, poolTokens: number): number {\n  const numerator = new BN(poolTokens).mul(stakePool.totalLamports);\n  const denominator = stakePool.poolTokenSupply;\n  if (numerator.lt(denominator)) {\n    return 0;\n  }\n  return divideBnToNumber(numerator, denominator);\n}\n\nexport function divideBnToNumber(numerator: BN, denominator: BN): number {\n  if (denominator.isZero()) {\n    return 0;\n  }\n  const quotient = numerator.div(denominator).toNumber();\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\n\nexport function newStakeAccount(\n  feePayer: PublicKey,\n  instructions: TransactionInstruction[],\n  lamports: number,\n): Keypair {\n  // Account for tokens not specified, creating one\n  const stakeReceiverKeypair = Keypair.generate();\n  console.log(`Creating account to receive stake ${stakeReceiverKeypair.publicKey}`);\n\n  instructions.push(\n    // Creating new account\n    SystemProgram.createAccount({\n      fromPubkey: feePayer,\n      newAccountPubkey: stakeReceiverKeypair.publicKey,\n      lamports,\n      space: StakeProgram.space,\n      programId: StakeProgram.programId,\n    }),\n  );\n\n  return stakeReceiverKeypair;\n}\n","import { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport {\n  AccountInfo,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  MintInfo,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { AccountLayout } from '../layouts';\n\nconst FAILED_TO_FIND_ACCOUNT = 'Failed to find account';\nconst INVALID_ACCOUNT_OWNER = 'Invalid account owner';\n\nexport async function getTokenMint(\n  connection: Connection,\n  tokenMintPubkey: PublicKey,\n): Promise<MintInfo | undefined> {\n  // @ts-ignore\n  const token = new Token(connection, tokenMintPubkey, TOKEN_PROGRAM_ID, null);\n  return token.getMintInfo();\n}\n\n/**\n * Retrieve the associated account or create one if not found.\n * This account may then be used as a `transfer()` or `approve()` destination\n */\nexport async function addAssociatedTokenAccount(\n  connection: Connection,\n  owner: PublicKey,\n  mint: PublicKey,\n  instructions: TransactionInstruction[],\n) {\n  const associatedAddress = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    owner,\n  );\n\n  let rentFee = 0;\n\n  // This is the optimum logic, considering TX fee, client-side computation,\n  // RPC roundtrips and guaranteed idempotent.\n  // Sadly we can't do this atomically;\n  try {\n    const account = await connection.getAccountInfo(associatedAddress);\n    if (!account) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(FAILED_TO_FIND_ACCOUNT);\n    }\n  } catch (err: any) {\n    // INVALID_ACCOUNT_OWNER can be possible if the associatedAddress has\n    // already been received some lamports (= became system accounts).\n    // Assuming program derived addressing is safe, this is the only case\n    // for the INVALID_ACCOUNT_OWNER in this code-path\n    if (err.message === FAILED_TO_FIND_ACCOUNT || err.message === INVALID_ACCOUNT_OWNER) {\n      instructions.push(\n        Token.createAssociatedTokenAccountInstruction(\n          ASSOCIATED_TOKEN_PROGRAM_ID,\n          TOKEN_PROGRAM_ID,\n          mint,\n          associatedAddress,\n          owner,\n          owner,\n        ),\n      );\n      rentFee = await connection.getMinimumBalanceForRentExemption(AccountLayout.span);\n    } else {\n      throw err;\n    }\n    console.warn(err);\n  }\n\n  return {\n    associatedAddress,\n    rentFee,\n  };\n}\n\nexport async function getTokenAccount(\n  connection: Connection,\n  tokenAccountAddress: PublicKey,\n  expectedTokenMint: PublicKey,\n): Promise<AccountInfo | void> {\n  try {\n    const account = await connection.getAccountInfo(tokenAccountAddress);\n    if (!account) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(`Invalid account ${tokenAccountAddress.toBase58()}`);\n    }\n    const tokenAccount = AccountLayout.decode(account.data) as AccountInfo;\n    if (tokenAccount.mint?.toBase58() != expectedTokenMint.toBase58()) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(\n        `Invalid token mint for ${tokenAccountAddress}, expected mint is ${expectedTokenMint}`,\n      );\n    }\n    return tokenAccount;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport { Buffer } from 'buffer';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<any>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength = type.layout.span;\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({ instruction: type.index }, fields);\n  type.layout.encode(layoutFields, data);\n\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","export * from './math';\nexport * from './program-address';\nexport * from './stake';\nexport * from './token';\nexport * from './instruction';\n\nexport function arrayChunk(array: any[], size: number): any[] {\n  const result = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n}\n","import {\n  PublicKey,\n  STAKE_CONFIG_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { STAKE_POOL_PROGRAM_ID } from './constants';\nimport { InstructionType, encodeData, decodeData } from './utils';\n\n/**\n * An enumeration of valid StakePoolInstructionType's\n */\nexport type StakePoolInstructionType =\n  | 'IncreaseValidatorStake'\n  | 'DecreaseValidatorStake'\n  | 'UpdateValidatorListBalance'\n  | 'UpdateStakePoolBalance'\n  | 'CleanupRemovedValidatorEntries'\n  | 'DepositStake'\n  | 'DepositSol'\n  | 'WithdrawStake'\n  | 'WithdrawSol';\n\nconst MOVE_STAKE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.ns64('lamports'),\n  BufferLayout.ns64('transientStakeSeed'),\n]);\n\nconst UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.u32('startIndex'),\n  BufferLayout.u8('noMerge'),\n]);\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_POOL_INSTRUCTION_LAYOUTS: {\n  [type in StakePoolInstructionType]: InstructionType;\n} = Object.freeze({\n  DecreaseValidatorStake: {\n    index: 3,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  IncreaseValidatorStake: {\n    index: 4,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  UpdateValidatorListBalance: {\n    index: 6,\n    layout: UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT,\n  },\n  UpdateStakePoolBalance: {\n    index: 7,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  CleanupRemovedValidatorEntries: {\n    index: 8,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  DepositStake: {\n    index: 9,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  /// Withdraw the token from the pool at the current ratio.\n  WithdrawStake: {\n    index: 10,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  /// Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n  /// representing ownership into the pool. Inputs are converted to the current ratio.\n  DepositSol: {\n    index: 14,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  /// Withdraw SOL directly from the pool's reserve account. Fails if the\n  /// reserve does not have enough SOL.\n  WithdrawSol: {\n    index: 16,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n});\n\n/**\n * Cleans up validator stake account entries marked as `ReadyForRemoval`\n */\nexport type CleanupRemovedValidatorEntriesParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n};\n\n/**\n * Updates balances of validator and transient stake accounts in the pool.\n */\nexport type UpdateValidatorListBalanceParams = {\n  stakePool: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  validatorAndTransientStakePairs: PublicKey[];\n  startIndex: number;\n  noMerge: boolean;\n};\n\n/**\n * Updates total pool balance based on balances in the reserve and validator list.\n */\nexport type UpdateStakePoolBalanceParams = {\n  stakePool: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * (Staker only) Decrease active stake on a validator, eventually moving it to the reserve\n */\nexport type DecreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  transientStake: PublicKey;\n  // Amount of lamports to split into the transient stake account.\n  lamports: number;\n  // Seed to used to create the transient stake account.\n  transientStakeSeed: number;\n};\n\n/**\n * (Staker only) Increase stake on a validator from the reserve account.\n */\nexport type IncreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  transientStake: PublicKey;\n  validatorVote: PublicKey;\n  // Amount of lamports to split into the transient stake account.\n  lamports: number;\n  // Seed to used to create the transient stake account.\n  transientStakeSeed: number;\n};\n\n/**\n * Deposits a stake account into the pool in exchange for pool tokens\n */\nexport type DepositStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  depositAuthority: PublicKey;\n  withdrawAuthority: PublicKey;\n  depositStake: PublicKey;\n  validatorStake: PublicKey;\n  reserveStake: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * Withdraws a stake account from the pool in exchange for pool tokens\n */\nexport type WithdrawStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorStake: PublicKey;\n  destinationStake: PublicKey;\n  destinationStakeAuthority: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  sourcePoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Withdraw sol instruction params\n */\nexport type WithdrawSolParams = {\n  stakePool: PublicKey;\n  sourcePoolAccount: PublicKey;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  destinationSystemAccount: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  solWithdrawAuthority?: PublicKey | undefined;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n * representing ownership into the pool. Inputs are converted to the current ratio.\n */\nexport type DepositSolParams = {\n  stakePool: PublicKey;\n  depositAuthority?: PublicKey | undefined;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  fundingAccount: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n  lamports: number;\n};\n\n/**\n * Stake Pool Instruction class\n */\nexport class StakePoolInstruction {\n  /**\n   * Creates instruction to update a set of validators in the stake pool.\n   */\n  static updateValidatorListBalance(\n    params: UpdateValidatorListBalanceParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      startIndex,\n      noMerge,\n      validatorAndTransientStakePairs,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateValidatorListBalance;\n    const data = encodeData(type, { startIndex, noMerge: noMerge ? 1 : 0 });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      ...validatorAndTransientStakePairs.map((pubkey) => ({\n        pubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update the overall stake pool balance.\n   */\n  static updateStakePoolBalance(params: UpdateStakePoolBalanceParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      managerFeeAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateStakePoolBalance;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: false },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to cleanup removed validator entries.\n   */\n  static cleanupRemovedValidatorEntries(\n    params: CleanupRemovedValidatorEntriesParams,\n  ): TransactionInstruction {\n    const { stakePool, validatorList } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.CleanupRemovedValidatorEntries;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to increase the stake on a validator.\n   */\n  static increaseValidatorStake(params: IncreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to decrease the stake on a validator.\n   */\n  static decreaseValidatorStake(params: DecreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit SOL into a stake pool.\n   */\n  static depositStake(params: DepositStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      depositAuthority,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      reserveStake,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: depositAuthority, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: depositStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw SOL from a stake pool.\n   */\n  static depositSol(params: DepositSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      depositAuthority,\n      reserveStake,\n      fundingAccount,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n      lamports,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol;\n    const data = encodeData(type, { lamports });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: fundingAccount, isSigner: true, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (depositAuthority) {\n      keys.push({\n        pubkey: depositAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw SOL from a stake pool.\n   */\n  static withdrawStake(params: WithdrawStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      withdrawAuthority,\n      validatorStake,\n      destinationStake,\n      destinationStakeAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      managerFeeAccount,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawStake;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStakeAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw SOL from a stake pool.\n   */\n  static withdrawSol(params: WithdrawSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      reserveStake,\n      destinationSystemAccount,\n      managerFeeAccount,\n      solWithdrawAuthority,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawSol;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationSystemAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (solWithdrawAuthority) {\n      keys.push({\n        pubkey: solWithdrawAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Decode a deposit stake pool instruction and retrieve the instruction params.\n   */\n  static decodeDepositStake(instruction: TransactionInstruction): DepositStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 11);\n\n    decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      validatorList: instruction.keys[1].pubkey,\n      depositAuthority: instruction.keys[2].pubkey,\n      withdrawAuthority: instruction.keys[3].pubkey,\n      depositStake: instruction.keys[4].pubkey,\n      validatorStake: instruction.keys[5].pubkey,\n      reserveStake: instruction.keys[6].pubkey,\n      destinationPoolAccount: instruction.keys[7].pubkey,\n      managerFeeAccount: instruction.keys[8].pubkey,\n      referralPoolAccount: instruction.keys[9].pubkey,\n      poolMint: instruction.keys[10].pubkey,\n    };\n  }\n\n  /**\n   * Decode a deposit sol instruction and retrieve the instruction params.\n   */\n  static decodeDepositSol(instruction: TransactionInstruction): DepositSolParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 9);\n\n    const { amount } = decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      depositAuthority: instruction.keys[1].pubkey,\n      withdrawAuthority: instruction.keys[2].pubkey,\n      reserveStake: instruction.keys[3].pubkey,\n      fundingAccount: instruction.keys[4].pubkey,\n      destinationPoolAccount: instruction.keys[5].pubkey,\n      managerFeeAccount: instruction.keys[6].pubkey,\n      referralPoolAccount: instruction.keys[7].pubkey,\n      poolMint: instruction.keys[8].pubkey,\n      lamports: amount,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('Invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `Invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n","import {\n  AccountInfo,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  StakeAuthorizationLayout,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  ValidatorAccount,\n  addAssociatedTokenAccount,\n  arrayChunk,\n  calcLamportsWithdrawAmount,\n  findStakeProgramAddress,\n  findTransientStakeProgramAddress,\n  findWithdrawAuthorityProgramAddress,\n  getTokenAccount,\n  getValidatorListAccount,\n  newStakeAccount,\n  prepareWithdrawAccounts,\n  lamportsToSol,\n  solToLamports,\n} from './utils';\nimport { StakePoolInstruction } from './instructions';\nimport {\n  StakePool,\n  StakePoolLayout,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfo,\n} from './layouts';\nimport { MAX_VALIDATORS_TO_UPDATE, MINIMUM_ACTIVE_STAKE, STAKE_POOL_PROGRAM_ID } from './constants';\n\nexport type { StakePool, AccountType, ValidatorList, ValidatorStakeInfo } from './layouts';\nexport { STAKE_POOL_PROGRAM_ID } from './constants';\nexport * from './instructions';\n\nexport interface ValidatorListAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<ValidatorList>;\n}\n\nexport interface StakePoolAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<StakePool>;\n}\n\nexport interface WithdrawAccount {\n  stakeAddress: PublicKey;\n  voteAddress?: PublicKey;\n  poolAmount: number;\n}\n\n/**\n * Wrapper class for a stake pool.\n * Each stake pool has a stake pool account and a validator list account.\n */\nexport interface StakePoolAccounts {\n  stakePool: StakePoolAccount | undefined;\n  validatorList: ValidatorListAccount | undefined;\n}\n\n/**\n * Retrieves and deserializes a StakePool account using a web3js connection and the stake pool address.\n * @param connection: An active web3js connection.\n * @param stakePoolAddress: The public key (address) of the stake pool account.\n */\nexport async function getStakePoolAccount(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n): Promise<StakePoolAccount> {\n  const account = await connection.getAccountInfo(stakePoolAddress);\n\n  if (!account) {\n    throw new Error('Invalid stake pool account');\n  }\n\n  return {\n    pubkey: stakePoolAddress,\n    account: {\n      data: StakePoolLayout.decode(account.data),\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\n/**\n * Retrieves all StakePool and ValidatorList accounts that are running a particular StakePool program.\n * @param connection: An active web3js connection.\n * @param stakePoolProgramAddress: The public key (address) of the StakePool program.\n */\nexport async function getStakePoolAccounts(\n  connection: Connection,\n  stakePoolProgramAddress: PublicKey,\n): Promise<(StakePoolAccount | ValidatorListAccount)[] | undefined> {\n  const response = await connection.getProgramAccounts(stakePoolProgramAddress);\n\n  return response.map((a) => {\n    let decodedData;\n\n    if (a.account.data.readUInt8() === 1) {\n      try {\n        decodedData = StakePoolLayout.decode(a.account.data);\n      } catch (error) {\n        console.log('Could not decode StakeAccount. Error:', error);\n        decodedData = undefined;\n      }\n    } else if (a.account.data.readUInt8() === 2) {\n      try {\n        decodedData = ValidatorListLayout.decode(a.account.data);\n      } catch (error) {\n        console.log('Could not decode ValidatorList. Error:', error);\n        decodedData = undefined;\n      }\n    } else {\n      console.error(\n        `Could not decode. StakePoolAccount Enum is ${a.account.data.readUInt8()}, expected 1 or 2!`,\n      );\n      decodedData = undefined;\n    }\n\n    return {\n      pubkey: a.pubkey,\n      account: {\n        data: decodedData,\n        executable: a.account.executable,\n        lamports: a.account.lamports,\n        owner: a.account.owner,\n      },\n    };\n  });\n}\n\n/**\n * Creates instructions required to deposit stake to stake pool.\n */\nexport async function depositStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  authorizedPubkey: PublicKey,\n  validatorVote: PublicKey,\n  depositStake: PublicKey,\n  poolTokenReceiverAccount?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Signer[] = [];\n\n  const poolMint = stakePool.account.data.poolMint;\n\n  let rentFee = 0;\n\n  // Create token account if not specified\n  if (!poolTokenReceiverAccount) {\n    const { associatedAddress, rentFee: fee } = await addAssociatedTokenAccount(\n      connection,\n      authorizedPubkey,\n      poolMint,\n      instructions,\n    );\n    poolTokenReceiverAccount = associatedAddress;\n    rentFee += fee;\n  }\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Staker,\n    }).instructions,\n  );\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Withdrawer,\n    }).instructions,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositStake({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      depositAuthority: stakePool.account.data.stakeDepositAuthority,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      referralPoolAccount: poolTokenReceiverAccount,\n      destinationPoolAccount: poolTokenReceiverAccount,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      poolMint,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n    rentFee,\n  };\n}\n\n/**\n * Creates instructions required to deposit sol to stake pool.\n */\nexport async function depositSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  from: PublicKey,\n  lamports: number,\n  destinationTokenAccount?: PublicKey,\n  referrerTokenAccount?: PublicKey,\n  depositAuthority?: PublicKey,\n) {\n  const fromBalance = await connection.getBalance(from, 'confirmed');\n  if (fromBalance < lamports) {\n    throw new Error(\n      `Not enough SOL to deposit into pool. Maximum deposit amount is ${lamportsToSol(\n        fromBalance,\n      )} SOL.`,\n    );\n  }\n\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n\n  // Ephemeral SOL account just to do the transfer\n  const userSolTransfer = new Keypair();\n  const signers: Signer[] = [userSolTransfer];\n  const instructions: TransactionInstruction[] = [];\n\n  let rentFee = 0;\n\n  // Create the ephemeral SOL account\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: from,\n      toPubkey: userSolTransfer.publicKey,\n      lamports,\n    }),\n  );\n\n  // Create token account if not specified\n  if (!destinationTokenAccount) {\n    const { associatedAddress, rentFee: fee } = await addAssociatedTokenAccount(\n      connection,\n      from,\n      stakePool.poolMint,\n      instructions,\n    );\n    destinationTokenAccount = associatedAddress;\n    rentFee += fee;\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositSol({\n      stakePool: stakePoolAddress,\n      reserveStake: stakePool.reserveStake,\n      fundingAccount: userSolTransfer.publicKey,\n      destinationPoolAccount: destinationTokenAccount,\n      managerFeeAccount: stakePool.managerFeeAccount,\n      referralPoolAccount: referrerTokenAccount ?? destinationTokenAccount,\n      poolMint: stakePool.poolMint,\n      lamports,\n      withdrawAuthority,\n      depositAuthority,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n    rentFee,\n  };\n}\n\n/**\n * Creates instructions required to withdraw stake from a stake pool.\n */\nexport async function withdrawStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  amount: number,\n  useReserve = false,\n  voteAccountAddress?: PublicKey,\n  stakeReceiver?: PublicKey,\n  poolTokenAccount?: PublicKey,\n  validatorComparator?: (_a: ValidatorAccount, _b: ValidatorAccount) => number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = solToLamports(amount);\n\n  if (!poolTokenAccount) {\n    poolTokenAccount = await Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      stakePool.account.data.poolMint,\n      tokenOwner,\n    );\n  }\n\n  const tokenAccount = await getTokenAccount(\n    connection,\n    poolTokenAccount,\n    stakePool.account.data.poolMint,\n  );\n  if (!tokenAccount) {\n    throw new Error('Invalid token account');\n  }\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount.toNumber() < poolAmount) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n        Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount.toNumber())} pool tokens.`,\n    );\n  }\n\n  const stakeAccountRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const withdrawAccounts: WithdrawAccount[] = [];\n\n  if (useReserve) {\n    withdrawAccounts.push({\n      stakeAddress: stakePool.account.data.reserveStake,\n      voteAddress: undefined,\n      poolAmount,\n    });\n  } else if (voteAccountAddress) {\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      voteAccountAddress,\n      stakePoolAddress,\n    );\n    const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n    if (!stakeAccount) {\n      throw new Error('Invalid Stake Account');\n    }\n\n    const availableForWithdrawal = calcLamportsWithdrawAmount(\n      stakePool.account.data,\n      stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption,\n    );\n\n    if (availableForWithdrawal < poolAmount) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(\n        `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n          ${poolAmount} asked, ${availableForWithdrawal} available.`,\n      );\n    }\n    withdrawAccounts.push({\n      stakeAddress: stakeAccountAddress,\n      voteAddress: voteAccountAddress,\n      poolAmount,\n    });\n  } else {\n    // Get the list of accounts to withdraw from\n    withdrawAccounts.push(\n      ...(await prepareWithdrawAccounts(\n        connection,\n        stakePool.account.data,\n        stakePoolAddress,\n        poolAmount,\n        validatorComparator,\n        poolTokenAccount.equals(stakePool.account.data.managerFeeAccount),\n      )),\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      [],\n      poolAmount,\n    ),\n  );\n\n  let totalRentFreeBalances = 0;\n\n  // Max 5 accounts to prevent an error: \"Transaction too large\"\n  const maxWithdrawAccounts = 5;\n  let i = 0;\n\n  // Go through prepared accounts and withdraw/claim them\n  for (const withdrawAccount of withdrawAccounts) {\n    if (i > maxWithdrawAccounts) {\n      break;\n    }\n    // Convert pool tokens amount to lamports\n    const solWithdrawAmount = Math.ceil(\n      calcLamportsWithdrawAmount(stakePool.account.data, withdrawAccount.poolAmount),\n    );\n\n    let infoMsg = `Withdrawing ◎${solWithdrawAmount},\n      from stake account ${withdrawAccount.stakeAddress?.toBase58()}`;\n\n    if (withdrawAccount.voteAddress) {\n      infoMsg = `${infoMsg}, delegated to ${withdrawAccount.voteAddress?.toBase58()}`;\n    }\n\n    console.info(infoMsg);\n\n    let stakeToReceive;\n\n    // Use separate mutable variable because withdraw might create a new account\n    if (!stakeReceiver) {\n      const stakeKeypair = newStakeAccount(tokenOwner, instructions, stakeAccountRentExemption);\n      signers.push(stakeKeypair);\n      totalRentFreeBalances += stakeAccountRentExemption;\n      stakeToReceive = stakeKeypair.publicKey;\n    } else {\n      stakeToReceive = stakeReceiver;\n    }\n\n    instructions.push(\n      StakePoolInstruction.withdrawStake({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        validatorStake: withdrawAccount.stakeAddress,\n        destinationStake: stakeToReceive,\n        destinationStakeAuthority: tokenOwner,\n        sourceTransferAuthority: userTransferAuthority.publicKey,\n        sourcePoolAccount: poolTokenAccount,\n        managerFeeAccount: stakePool.account.data.managerFeeAccount,\n        poolMint: stakePool.account.data.poolMint,\n        poolTokens: withdrawAccount.poolAmount,\n        withdrawAuthority,\n      }),\n    );\n    i++;\n  }\n\n  return {\n    instructions,\n    signers,\n    stakeReceiver,\n    totalRentFreeBalances,\n  };\n}\n\n/**\n * Creates instructions required to withdraw SOL directly from a stake pool.\n */\nexport async function withdrawSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  solReceiver: PublicKey,\n  amount: number,\n  solWithdrawAuthority?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = solToLamports(amount);\n\n  const poolTokenAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    stakePool.account.data.poolMint,\n    tokenOwner,\n  );\n\n  const tokenAccount = await getTokenAccount(\n    connection,\n    poolTokenAccount,\n    stakePool.account.data.poolMint,\n  );\n  if (!tokenAccount) {\n    throw new Error('Invalid token account');\n  }\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount.toNumber() < poolAmount) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n          Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount.toNumber())} pool tokens.`,\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      [],\n      poolAmount,\n    ),\n  );\n\n  const poolWithdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  if (solWithdrawAuthority) {\n    const expectedSolWithdrawAuthority = stakePool.account.data.solWithdrawAuthority;\n    if (!expectedSolWithdrawAuthority) {\n      throw new Error('SOL withdraw authority specified in arguments but stake pool has none');\n    }\n    if (solWithdrawAuthority.toBase58() != expectedSolWithdrawAuthority.toBase58()) {\n      throw new Error(\n        `Invalid deposit withdraw specified, expected ${expectedSolWithdrawAuthority.toBase58()}, received ${solWithdrawAuthority.toBase58()}`,\n      );\n    }\n  }\n\n  const withdrawTransaction = StakePoolInstruction.withdrawSol({\n    stakePool: stakePoolAddress,\n    withdrawAuthority: poolWithdrawAuthority,\n    reserveStake: stakePool.account.data.reserveStake,\n    sourcePoolAccount: poolTokenAccount,\n    sourceTransferAuthority: userTransferAuthority.publicKey,\n    destinationSystemAccount: solReceiver,\n    managerFeeAccount: stakePool.account.data.managerFeeAccount,\n    poolMint: stakePool.account.data.poolMint,\n    poolTokens: poolAmount,\n    solWithdrawAuthority,\n  });\n\n  instructions.push(withdrawTransaction);\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to increase validator stake.\n */\nexport async function increaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const transientStakeSeed = validatorInfo.transientSeedSuffixStart.addn(1); // bump up by one to avoid reuse\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.increaseValidatorStake({\n      stakePool: stakePoolAddress,\n      staker: stakePool.account.data.staker,\n      validatorList: stakePool.account.data.validatorList,\n      reserveStake: stakePool.account.data.reserveStake,\n      transientStakeSeed: transientStakeSeed.toNumber(),\n      withdrawAuthority,\n      transientStake,\n      validatorVote,\n      lamports,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to decrease validator stake.\n */\nexport async function decreaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  const transientStakeSeed = validatorInfo.transientSeedSuffixStart.addn(1); // bump up by one to avoid reuse\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.decreaseValidatorStake({\n      stakePool: stakePoolAddress,\n      staker: stakePool.account.data.staker,\n      validatorList: stakePool.account.data.validatorList,\n      transientStakeSeed: transientStakeSeed.toNumber(),\n      withdrawAuthority,\n      validatorStake,\n      transientStake,\n      lamports,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to completely update a stake pool after epoch change.\n */\nexport async function updateStakePool(\n  connection: Connection,\n  stakePool: StakePoolAccount,\n  noMerge = false,\n) {\n  const stakePoolAddress = stakePool.pubkey;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const updateListInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  let startIndex = 0;\n  const validatorChunks: Array<ValidatorStakeInfo[]> = arrayChunk(\n    validatorList.account.data.validators,\n    MAX_VALIDATORS_TO_UPDATE,\n  );\n\n  for (const validatorChunk of validatorChunks) {\n    const validatorAndTransientStakePairs: PublicKey[] = [];\n\n    for (const validator of validatorChunk) {\n      const validatorStake = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      validatorAndTransientStakePairs.push(validatorStake);\n\n      const transientStake = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      validatorAndTransientStakePairs.push(transientStake);\n    }\n\n    updateListInstructions.push(\n      StakePoolInstruction.updateValidatorListBalance({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        validatorAndTransientStakePairs,\n        withdrawAuthority,\n        startIndex,\n        noMerge,\n      }),\n    );\n    startIndex += MAX_VALIDATORS_TO_UPDATE;\n  }\n\n  instructions.push(\n    StakePoolInstruction.updateStakePoolBalance({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      poolMint: stakePool.account.data.poolMint,\n      withdrawAuthority,\n    }),\n  );\n\n  instructions.push(\n    StakePoolInstruction.cleanupRemovedValidatorEntries({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n    }),\n  );\n\n  return {\n    updateListInstructions,\n    finalInstructions: instructions,\n  };\n}\n\n/**\n * Retrieves detailed information about the StakePool.\n */\nexport async function stakePoolInfo(connection: Connection, stakePoolAddress: PublicKey) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const reserveAccountStakeAddress = stakePool.account.data.reserveStake;\n  const totalLamports = stakePool.account.data.totalLamports;\n  const lastUpdateEpoch = stakePool.account.data.lastUpdateEpoch;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const maxNumberOfValidators = validatorList.account.data.maxValidators;\n  const currentNumberOfValidators = validatorList.account.data.validators.length;\n\n  const epochInfo = await connection.getEpochInfo();\n  const reserveStake = await connection.getAccountInfo(reserveAccountStakeAddress);\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const minimumReserveStakeBalance =\n    (await connection.getMinimumBalanceForRentExemption(StakeProgram.space)) + 1;\n\n  const stakeAccounts = await Promise.all(\n    validatorList.account.data.validators.map(async (validator) => {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      const updateRequired = !validator.lastUpdateEpoch.eqn(epochInfo.epoch);\n      return {\n        voteAccountAddress: validator.voteAccountAddress.toBase58(),\n        stakeAccountAddress: stakeAccountAddress.toBase58(),\n        validatorActiveStakeLamports: validator.activeStakeLamports.toString(),\n        validatorLastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        validatorLamports: validator.activeStakeLamports\n          .add(validator.transientStakeLamports)\n          .toString(),\n        validatorTransientStakeAccountAddress: transientStakeAccountAddress.toBase58(),\n        validatorTransientStakeLamports: validator.transientStakeLamports.toString(),\n        updateRequired,\n      };\n    }),\n  );\n\n  const totalPoolTokens = lamportsToSol(stakePool.account.data.poolTokenSupply);\n  const updateRequired = !lastUpdateEpoch.eqn(epochInfo.epoch);\n\n  return {\n    address: stakePoolAddress.toBase58(),\n    poolWithdrawAuthority: withdrawAuthority.toBase58(),\n    manager: stakePool.account.data.manager.toBase58(),\n    staker: stakePool.account.data.staker.toBase58(),\n    stakeDepositAuthority: stakePool.account.data.stakeDepositAuthority.toBase58(),\n    stakeWithdrawBumpSeed: stakePool.account.data.stakeWithdrawBumpSeed,\n    maxValidators: maxNumberOfValidators,\n    validatorList: validatorList.account.data.validators.map((validator) => {\n      return {\n        activeStakeLamports: validator.activeStakeLamports.toString(),\n        transientStakeLamports: validator.transientStakeLamports.toString(),\n        lastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        transientSeedSuffixStart: validator.transientSeedSuffixStart.toString(),\n        transientSeedSuffixEnd: validator.transientSeedSuffixEnd.toString(),\n        status: validator.status.toString(),\n        voteAccountAddress: validator.voteAccountAddress.toString(),\n      };\n    }), // CliStakePoolValidator\n    validatorListStorageAccount: stakePool.account.data.validatorList.toBase58(),\n    reserveStake: stakePool.account.data.reserveStake.toBase58(),\n    poolMint: stakePool.account.data.poolMint.toBase58(),\n    managerFeeAccount: stakePool.account.data.managerFeeAccount.toBase58(),\n    tokenProgramId: stakePool.account.data.tokenProgramId.toBase58(),\n    totalLamports: stakePool.account.data.totalLamports.toString(),\n    poolTokenSupply: stakePool.account.data.poolTokenSupply.toString(),\n    lastUpdateEpoch: stakePool.account.data.lastUpdateEpoch.toString(),\n    lockup: stakePool.account.data.lockup, // pub lockup: CliStakePoolLockup\n    epochFee: stakePool.account.data.epochFee,\n    nextEpochFee: stakePool.account.data.nextEpochFee,\n    preferredDepositValidatorVoteAddress:\n      stakePool.account.data.preferredDepositValidatorVoteAddress,\n    preferredWithdrawValidatorVoteAddress:\n      stakePool.account.data.preferredWithdrawValidatorVoteAddress,\n    stakeDepositFee: stakePool.account.data.stakeDepositFee,\n    stakeWithdrawalFee: stakePool.account.data.stakeWithdrawalFee,\n    // CliStakePool the same\n    nextStakeWithdrawalFee: stakePool.account.data.nextStakeWithdrawalFee,\n    stakeReferralFee: stakePool.account.data.stakeReferralFee,\n    solDepositAuthority: stakePool.account.data.solDepositAuthority?.toBase58(),\n    solDepositFee: stakePool.account.data.solDepositFee,\n    solReferralFee: stakePool.account.data.solReferralFee,\n    solWithdrawAuthority: stakePool.account.data.solWithdrawAuthority?.toBase58(),\n    solWithdrawalFee: stakePool.account.data.solWithdrawalFee,\n    nextSolWithdrawalFee: stakePool.account.data.nextSolWithdrawalFee,\n    lastEpochPoolTokenSupply: stakePool.account.data.lastEpochPoolTokenSupply.toString(),\n    lastEpochTotalLamports: stakePool.account.data.lastEpochTotalLamports.toString(),\n    details: {\n      reserveStakeLamports: reserveStake?.lamports,\n      reserveAccountStakeAddress: reserveAccountStakeAddress.toBase58(),\n      minimumReserveStakeBalance,\n      stakeAccounts,\n      totalLamports,\n      totalPoolTokens,\n      currentNumberOfValidators,\n      maxNumberOfValidators,\n      updateRequired,\n    }, // CliStakePoolDetails\n  };\n}\n"],"names":[],"mappings":"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"}